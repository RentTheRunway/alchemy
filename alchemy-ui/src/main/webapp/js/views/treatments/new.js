// Generated by CoffeeScript 1.7.1
(function() {
  define(['jquery', 'underscore', 'backbone', 'views/experiments/show', 'libs/text!templates/treatments/_new.html', 'collections/treatments', 'collections/allocations', 'models/treatment', 'models/allocation', 'models/experiment_update'], function($, _, Backbone, ShowExperimentView, newTreatmentFormTemplate, Treatments, Allocations, Treatment, Allocation, ExperimentUpdate) {
    var NewTreatmentFormView;
    return NewTreatmentFormView = Backbone.View.extend({
      tagName: 'div',
      className: 'treatment-new modal-content',
      template: _.template(newTreatmentFormTemplate),
      events: {
        'submit form': 'submitNewTreatment'
      },
      initialize: function() {
        return this.render();
      },
      render: function() {
        var $modalContent;
        this.$el.html(this.template());
        $modalContent = $('.modal').find('.modal-dialog');
        $modalContent.html(this.$el);
        $('.modal').modal();
        return this;
      },
      submitNewTreatment: function(e) {
        var $form, allocationSize, allocations, description, experimentUpdate, formData, name, newAllocation, newTreatment, treatments;
        e.preventDefault();
        $form = $(e.currentTarget);
        formData = $form.serializeArray();
        name = _.find(formData, function(element) {
          return element.name === "treatment-name";
        }).value;
        description = _.find(formData, function(element) {
          return element.name === "treatment-description";
        }).value;
        allocationSize = _.find(formData, function(element) {
          return element.name === "treatment-allocation";
        }).value;
        newTreatment = new Treatment({
          name: name,
          description: description
        });
        treatments = new Treatments(this.model.get("treatments"));
        treatments.add(newTreatment);
        newAllocation = new Allocation({
          treatment: name,
          size: allocationSize
        });
        allocations = new Allocations(this.model.get("allocations"));
        allocations.add(newAllocation);
        _.each(allocations.models, function(a) {
          return a.unset("offset");
        });
        experimentUpdate = new ExperimentUpdate({
          treatments: treatments.models,
          allocations: allocations.models
        });
        return experimentUpdate.sync("create", experimentUpdate, {
          url: "/api/experiments/" + (this.model.get('name')),
          complete: (function(_this) {
            return function(jqXHR, textStatus) {
              if (jqXHR.status === 204) {
                $('.modal').modal('hide');
                return _this.model.fetch();
              } else {
                return alert('S');
              }
            };
          })(this)
        });
      }
    });
  });

}).call(this);
